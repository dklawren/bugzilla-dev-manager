#!/usr/bin/perl

use strict;
use warnings;

#

use FindBin qw($Bin);
use lib $Bin;

#

use BugzillaDev;
use BugzillaDevConfig;
use CGI;
use Cwd qw(abs_path cwd);
use File::Basename;
use File::Copy;
use File::Copy::Recursive qw(dircopy);
use File::Find;
use FileHandle;
use File::Path qw(remove_tree);
use File::Slurp;
use Pod::Text::Ansi;
use Storable qw(dclone);
use Test::Harness qw(&runtests);

my $action = lc(shift @ARGV || '');

if ($action eq 'new') {
    my $subdir = validateSubdir(shift @ARGV);
    if (-e "$HTDOCS_PATH/$subdir/localconfig") {
        die "$HTDOCS_PATH/$subdir already exists\n";
    }

    if (dirToBugID($subdir)) {
        my $bug = getBugInfo(dirToBugID($subdir));
        printf "Bug %s: %s\n", dirToBugID($subdir), $bug->{summary};
    }


    if (!scalar @ARGV) {
        unshift @ARGV, determineDefaultRepo($subdir);
    }
    my $repo = validateRepo(shift @ARGV);

    if (!scalar @ARGV) {
        unshift @ARGV, determineDefaultDatabase($subdir);
    }
    my $database = validateDatabase(shift @ARGV);

    if (!databaseExists($database, %LOCALCONFIG)) {
        exit unless confirm("the database '$database' does not exist, continue?");
    }
    info("creating $subdir");
    info("using repo $repo");
    info("using database $database");
    updateRepo($repo);
    createSubDir($subdir, $repo);
    updateLocalConfig($subdir, $database);
    fixParams($subdir);
    fixHtAccess($subdir);
    pushd("$HTDOCS_PATH/$subdir");
    runChecksetup('-t');
    runChecksetup();
    popd();
    fixSubDir($subdir);
    checkCurrentDatabase($subdir);
    info("$subdir created\n" . getDirSummary($subdir, 1));
    GROWL("$subdir created");

} elsif ($action eq 'patch') {
    my ($subdir, $repo);
    eval { $subdir = getCurrentSubdir() };
    if ($@) {
        eval { $repo = getCurrentRepoPath() };
    }
    if ($subdir) {
        my $patch = validatePatch(dirToBugID($subdir), @ARGV);
        info("patching $subdir with #$patch");
        my $filename = downloadPatch($subdir, $patch);
        applyPatch($subdir, $filename);
    } elsif ($repo) {
        my $bugId = shift @ARGV
            or die "bug number required\n";
        my $patch = validatePatch($bugId, @ARGV);
        deployRepoPatch($repo, $patch, grep { $_ eq '-force' } @ARGV);
    } else {
        getCurrentSubdir();
    }

} elsif ($action eq 'new-patch') {
    my $subdir = getCurrentSubdir();
    info("about to revert all current changes and apply a new patch");
    my $patch = validatePatch(dirToBugID($subdir), shift @ARGV);
    info("patching $subdir with #$patch");

    system "$0 unfix";
    system "bzr revert";

    my $in_unknown = 0;
    foreach my $line (`bzr st`) {
        chomp $line;
        if ($line =~ /^unknown:/) {
            $in_unknown = 1;
            next;
        }
        next unless $in_unknown;
        last unless $line =~ /^\s+(.+)$/;
        my $file = $1;
        print "deleting $file\n";
        if (-d $file) {
            remove_tree($file) or die $!;
        } else {
            unlink($file) or die $!;
        }
    }

    system "bzr up";
    system "$0 fix";
    my $filename = downloadPatch($subdir, $patch);
    applyPatch($subdir, $filename);

} elsif ($action eq 'get-patch') {
    my $subdir = getCurrentSubdir();
    my $patch = validatePatch(dirToBugID($subdir), shift @ARGV, undef, 1);
    downloadPatch($subdir, $patch);

} elsif ($action eq 'diff') {
    my $subdir = getCurrentSubdir();
    my $quick = grep { $_ eq '-quick' } @ARGV;
    my $stdout = grep { $_ eq '-' or $_ eq '-stdout' } @ARGV;
    my $ignore_whitespace = grep { $_ eq '-w' } @ARGV;
    @ARGV = grep { $_ !~ /^-/ } @ARGV;
    my $bug = shift || $subdir;
    my @files = @ARGV;
    if (!$quick) {
        info("running tests");
        my @missing;
        my @added = getAddedFiles("$HTDOCS_PATH/$subdir");
        foreach my $file (@added) {
            next unless -T "$HTDOCS_PATH/$subdir/$file";
            if (isMissingBoilerPlate("$HTDOCS_PATH/$subdir/$file")) {
                push @missing, $file;
            }
        }
        if (scalar @missing) {
            foreach my $file (@missing) {
                print "$file does not contain a boilerplate\n";
            }
            exit unless confirm("continue?");
        }
        checkForTabs($subdir);
        checkForUnknownFiles($subdir);
        runTests($subdir, 2, 4, 5, 6, 8, 9, 10, 11);
    }
    info("making patch");
    my $filename = diff($subdir, $bug, $stdout, $ignore_whitespace, @files);
    info("checking patch");
    checkForCommonMistakes($subdir, $filename);

} elsif ($action eq 'db') {
    my $subdir = getCurrentSubdir();
    if (scalar @ARGV) {
        my $database = validateDatabase(shift @ARGV);
        if ($database eq getCurrentDatabase($subdir)) {
            info("the current database is already $database");
            exit;
        }
        updateLocalConfig($subdir, $database);
        getDbh($subdir);
        fixParams($subdir);
        checkCurrentDatabase($subdir);
    } else {
        info(sprintf("current database for %s is %s", $subdir, getCurrentDatabase($subdir)));
    }

} elsif ($action eq 'fix') {
    my ($subdir, $repo);
    eval { $subdir = getCurrentSubdir() };
    if ($@) {
        eval { $repo = getCurrentRepoPath() };
    }
    if ($subdir) {
        info("fixing $subdir");
        fixSubDir($subdir);
    } elsif ($repo) {
        info("fixing $repo");
        fixRepo($repo);
    } else {
        getCurrentSubdir();
    }

} elsif ($action eq 'disable-bugmail') {
    my $subdir = getCurrentSubdir();
    info("disabling bugmail on " . getCurrentDatabase($subdir));
    disableBugmail($subdir);

} elsif ($action eq 'reset-email-queue' || $action eq 'reset-queue') {
    my $subdir = getCurrentSubdir();
    info("resetting email queue $subdir");
    resetEmailQueue($subdir);

} elsif ($action eq 'reset-password') {
    my $subdir = getCurrentSubdir();
    my $login = shift @ARGV
        or die "syntax: bz reset-password <login>\n";
    info("resetting password for $login");
    resetPassword($subdir, $login);

} elsif ($action eq 'fix-all') {
    my $clean_params = dclone(\%PARAMS);
    foreach my $subdir (grep { -e "$_/localconfig" } glob("$HTDOCS_PATH/*")) {
        %PARAMS = %$clean_params;
        $subdir = basename($subdir);
        info("fixing $subdir");
        fixSubDir($subdir);
    }

} elsif ($action eq 'unfix') {
    my $subdir = getCurrentSubdir();
    info("unfix $subdir");
    unfix($subdir);

} elsif ($action eq 'create-db' || $action eq 'create-database') {
    my $subdir = getCurrentSubdir();
    @ARGV or die "syntax: bz $action <database_name>\n";
    createDatabase($subdir, @ARGV);

} elsif ($action eq 'drop-table') {
    my $subdir = getCurrentSubdir();
    @ARGV or die "syntax: bz drop-table <table>\n";
    dropTable($subdir, @ARGV);

} elsif ($action eq 'drop-column') {
    my $subdir = getCurrentSubdir();
    @ARGV or die "syntax: bz drop-column <table.column>\n";
    dropColumn($subdir, @ARGV);

} elsif ($action eq 'drop-cf') {
    my $subdir = getCurrentSubdir();
    @ARGV or die "syntax: bz drop-cf <custom_field>\n";
    dropCustomField($subdir, @ARGV);

} elsif ($action eq 'export-schema') {
    my $subdir = getCurrentSubdir();
    @ARGV or die "syntax: bz export-schema <filename>\n";
    exportSchema($subdir, @ARGV);

} elsif ($action eq 'import-schema') {
    my $subdir = getCurrentSubdir();
    @ARGV or die "syntax: bz import-schema <filename>\n";
    importSchema($subdir, @ARGV);

} elsif ($action eq 'boilerplate' or $action eq 'bp') {
    my $path;

    eval {
        my $subdir = getCurrentSubdir();
        $path = "$HTDOCS_PATH/$subdir";
    };
    if (!$path) {
        eval {
            $path = getCurrentRepoPath();
        };
    }
    if (!$path || !-d $path) {
        getCurrentSubdir();
    }

    addBoilerPlates($path, @ARGV);

} elsif ($action eq 'test') {
    my $subdir = getCurrentSubdir();
    info("running tests");
    checkForTabs($subdir);
    checkForCommonMistakes($subdir);
    runTests($subdir, @ARGV);

} elsif ($action eq 'xt') {
    my $subdir = getCurrentSubdir();
    info("running xt tests");
    runXtTests($subdir, @ARGV);

} elsif ($action eq 'checksetup' or $action eq 'cs') {
    my $subdir = getCurrentSubdir();
    pushd("$HTDOCS_PATH/$subdir");
    runChecksetup(@ARGV);
    popd();

} elsif ($action eq 'grep') {
    my $outputDirOnly = grep { $_ eq '-n' } @ARGV;
    my $query = join(' ', grep { $_ ne '-n' } @ARGV);
    die("missing query string\n") if $query eq '';
    info("searching summaries for '$query'") unless $outputDirOnly;
    grepSummaries($query, undef, $outputDirOnly);

} elsif ($action eq 'list') {
    my $subdir;
    eval { $subdir = getCurrentSubdir() };
    grepSummaries('', $subdir);

} elsif ($action eq 'info') {
    my $subdir = getCurrentSubdir();
    showInfo($subdir);

} elsif ($action =~ /^yui-(.+)/) {
    my $edition = $1;
    my $subdir = getCurrentSubdir();
    info("switching to yui-$edition");
    yui($subdir, $edition, (grep { $_ eq '-force' } @ARGV));

} elsif ($action eq 'mysql') {
    my $subdir = getCurrentSubdir();
    mysqlClient($subdir);

} elsif ($action eq 'mysql-trace') {
    my $subdir = getCurrentSubdir();
    mysqlTraceToggle($subdir);

} else {
    usage($action ? "unknown action '$action'" : '');
}

sub usage {
    my ($error) = @_;

    alert("\n$error\n") if $error;

    my $parser = Pod::Text::Ansi->new(sentence => 0, width => 78);
    $parser->output_fh(*STDOUT);
    $parser->parse_lines(<DATA>);

    exit;
}

#

sub validateSubdir {
    my ($subdir) = @_;
    $subdir = lc($subdir || '');
    $subdir =~ s#^htdocs[\\|/]##;
    $subdir =~ s#[\\|/]$##;
    die("invalid directory '$subdir'\n") if $subdir eq '' || $subdir eq '.';
    return $subdir;
}

sub getCurrentSubdir {
    my $subdir = abs_path('.') . '/';
    die("invalid working directory: $subdir\n") unless $subdir =~ m#/htdocs/([^/]+)/#;
    $subdir = $1;
    return $subdir;
}

sub getCurrentRepoPath {
    my $path = abs_path(cwd());
    while (!-d "$path/.bzr") {
        my @dirs = File::Spec->splitdir($path);
        pop @dirs;
        $path = File::Spec->catdir(@dirs);
        die "cwd isn't a bzr repository\n" if $path eq '/';
    }
    return $path;
}

sub determineDefaultRepo {
    my ($subdir) = @_;

    my $default;
    if (dirToBugID($subdir)) {
        my $bug = getBugInfo(dirToBugID($subdir));
        if ($bug->{product} eq 'Bugzilla') {
            $default = $bug->{milestone};
            $default =~ s/^bugzilla //i;
            if ($default eq '---' || $default eq $BUGZILLA_TRUNK_MILESTONE) {
                $default = 'bugzilla/trunk';
            } else {
                $default = "bugzilla/$default";
            }
        } elsif ($bug->{product} eq 'bugzilla.mozilla.org') {
            $default = $DEFAULT_BMO_REPO;
        } else {
            info("unable to map " . $bug->{product} . " to a repo");
            $default = $DEFAULT_BMO_REPO;
        }

    } else {
        $default = $DEFAULT_BMO_REPO;
    }

    exit unless confirm("use default repository '$default'?");
    return $default;
}

sub determineDefaultDatabase {
    my ($subdir) = @_;

    my $default;
    if (dirToBugID($subdir)) {
        my $bug = getBugInfo(dirToBugID($subdir));
        if ($bug->{product} eq 'Bugzilla') {
            $default = $bug->{milestone};
            $default =~ s/^bugzilla //i;
            $default = 'trunk' if $default eq '---' || $default eq $BUGZILLA_TRUNK_MILESTONE;
        } elsif ($bug->{product} eq 'bugzilla.mozilla.org') {
            $default = $DEFAULT_BMO_DB;
        } else {
            info("unable to map " . $bug->{product} . " to a database");
            $default = $DEFAULT_BMO_DB;
        }

    } else {
        $default = $DEFAULT_BMO_DB;
    }

    $default = validateDatabase($default);
    exit unless confirm("use default database '$default'?");
    return $default;
}

sub validateRepo {
    my ($repo) = @_;
    $repo = lc($repo || '');
    $repo =~ s#^repo[\\|/]##;
    die("missing repo\n") if $repo eq '';
    my $found = 0;
    foreach my $try ("$repo", "bugzilla/$repo", "bmo/$repo") {
        if (-d "$REPO_PATH/$try") {
            $repo = $try;
            $found = 1;
            last;
        }
    }
    die "failed to find repo/$repo\n" unless $found;
    die "invalid repo '$repo'\n" unless -e "$REPO_PATH/$repo/checksetup.pl";
    return $repo;
}

sub validateDatabase {
    my ($db) = @_;
    die "missing database\n" unless $db;
    $db = lc $db;
    $db =~ s/[\.-\/]/_/g;
    if ($db ne 'bugs' && $db !~ /^bugs_/) {
        $db = "bugs_$db";
    }
    return $db;
}

sub validatePatch {
    my ($bug_id, $patch, $from_bug_id, $all) = @_;
    $bug_id ||= '';

    if ($patch && $patch eq 'bug' && $from_bug_id) {
        $patch = '';
        $bug_id = $from_bug_id;
    } elsif ($bug_id eq 'bug' && $patch) {
        $bug_id = $patch;
        $patch = '';
    }

    if (!$patch && $bug_id =~ /^\d+$/) {
        info("fetching patches from bug $bug_id:");
        print getBugSummary($bug_id), "\n";
        my $proxy = getBmoProxy();
        my $response = $proxy->call('Bug.attachments', { ids => [ $bug_id ], exclude_fields => [ 'data' ] });
        soapErrChk($response);
        my @patches;
        foreach my $rh (@{$response->result->{bugs}->{$bug_id}}) {
            next unless $rh->{is_patch};
            next if $rh->{is_obsolete} && !$all;
            push @patches, $rh;
        }
        if (!scalar @patches) {
            die "no patches found\n";
        }
        if (scalar @patches < 10) {
            my $prompt = "  0. cancel\n";
            my $re = '0';
            for(my $i = 1; $i <= scalar @patches; $i++) {
                $prompt .= sprintf " %2s. %s\n", $i, $patches[$i - 1]->{summary};
                $re .= "$i";
            }
            $prompt .= '? ';
            my $no = prompt($prompt, qr/[$re]/i);
            exit if $no == 0;
            $patch = $patches[$no - 1]->{id};
        }
    }

    die("patch number or url missing\n") if !defined($patch) or $patch eq '';
    if ($patch =~ /id=(\d+)/) {
        $patch = $1;
    }
    die("invalid patch number\n") if $patch =~ /\D/;
    return $patch;
}

sub updateRepo {
    my ($repo) = @_;
    pushd("$REPO_PATH/$repo");
    info("updating repo $repo");
    fixRepo("$REPO_PATH/$repo", 1);
    system('bzr up');
    popd();
}

sub createSubDir {
    my ($subdir, $repo) = @_;
    return if -e "$HTDOCS_PATH/$subdir";
    die "invalid repo\n" unless -d "$REPO_PATH/$repo";
    info("creating $subdir directory");
    dircopy("$REPO_PATH/$repo", "$HTDOCS_PATH/$subdir") or die $!;
    foreach my $file (glob("$HTDOCS_PATH/$subdir/*.patch")) {
        unlink $file;
    }
    fixRepo("$HTDOCS_PATH/$subdir", 1);
    die "$HTDOCS_PATH/$subdir/checksetup.pl missing\n" unless -e "$HTDOCS_PATH/$subdir/checksetup.pl";
}

sub getCurrentDatabase {
    my ($subdir) = @_;
    createDefaultConfig($subdir);
    open(FH, "$HTDOCS_PATH/$subdir/localconfig") or die $!;
    my @file = <FH>;
    close FH;
    foreach my $line (@file) {
        next unless $line =~ /^\$db_name\s*=\s*'([^']+)'/;
        return $1;
    }
    return "unknown";
}

sub checkCurrentDatabase {
    my ($subdir) = @_;
    my $dbh = getDbh($subdir);
    my $count = $dbh->selectrow_array("SELECT count(*) FROM profiles WHERE disable_mail = 0");
    if ($count > 5) {
        warn(getCurrentDatabase($subdir) . " has $count users with bugmail enabled\n");
    }
}

sub updateLocalConfig {
    my ($subdir, $database) = @_;
    $database ||= getCurrentDatabase($subdir);
    createDefaultConfig($subdir);
    open(FH, "$HTDOCS_PATH/$subdir/localconfig") or die $!;
    my @file = <FH>;
    close FH;
    $LOCALCONFIG{'db_name'} = $database;
    foreach my $line (@file) {
        next unless $line =~ /^\s*\$([\w_]+)\s*=\s*'([^']*)'/;
        my ($name, $value) = ($1, $2);
        if (exists $LOCALCONFIG{$name} && $LOCALCONFIG{$name} ne $value) {
            info("setting $name to $LOCALCONFIG{$name}");
            $line = "\$$name = '$LOCALCONFIG{$name}';\n";
        }
    }
    open(FH, ">$HTDOCS_PATH/$subdir/localconfig") or die $!;
    print FH @file;
    close FH;
}

sub createDefaultConfig {
    my ($subdir) = @_;
    return if -e "$HTDOCS_PATH/$subdir/localconfig";
    info("creating $HTDOCS_PATH/$subdir/localconfig");
    open(FH, ">$HTDOCS_PATH/$subdir/localconfig") or die $!;
    print FH <<'EOF';
$create_htaccess = 1;
$webservergroup = '';
$use_suexec = 0;
$db_driver = 'mysql';
$db_host = '';
$db_name = 'bugs';
$db_user = 'bugs';
$db_pass = '';
$db_port = 0;
$db_sock = '';
$db_check = 1;
$index_html = 0;
$cvsbin = '';
$interdiffbin = '';
$diffpath = '';
EOF
    close FH;
}

sub applyLocalPatches {
    my ($subdir) = @_;

    pushd("$HTDOCS_PATH/$subdir");

    foreach my $file (getLocalPatchFiles($subdir)) {
        (my $short_file = $file) =~ s/^\Q$DATA_PATH\/patches\///;
        info("applying patch from $short_file");
        system "patch --forward --strip=0 --input=$file --reject-file=- --batch";
    }

    popd();
}

sub revertLocalPatches {
    my ($subdir) = @_;

    pushd("$HTDOCS_PATH/$subdir");
    foreach my $file (getLocalPatchFiles($subdir)) {
        (my $short_file = $file) =~ s/^\Q$DATA_PATH\/patches\///;
        info("reverting patch from $short_file");
        system "patch --reverse --strip=0 --input=$file --reject-file=- --batch"
    }

    if (-e "extensions/LimitedEmailEx") {
        info("deleting limited-email extension");
        unlink("$HTDOCS_PATH/$subdir/extensions/LimitedEmailEx");
    }

    popd();
}

sub getLocalPatchFiles {
    my ($subdir) = @_;
    my @specs;
    push @specs, "$DATA_PATH/patches/shared/*.patch";
    push @specs, "$DATA_PATH/patches/" . getRepoBase($subdir) ."/*.patch";
    my @files;
    push @files, glob($_) foreach @specs;
    return @files;
}

sub downloadPatch {
    my ($subdir, $patch) = @_;

    info("fetching patch $patch");
    my $proxy = getBmoProxy();

    my $response = $proxy->call('Bug.attachments', { attachment_ids => [ $patch ] });
    soapErrChk($response);

    my $attachments = $response->result->{attachments};
    die "failed to get attachment $patch information\n" unless exists $attachments->{$patch};
    my $attachment = $attachments->{$patch};
    printf STDERR "Bug %s: %s\n", $attachment->{bug_id}, $attachment->{description} || $attachment->{summary};
    die "attachment is not a patch\n" unless $attachment->{is_patch} == '1';
    if ($attachment->{is_obsolete} == '1') {
        return unless confirm('attachment is obsolete, continue?');
    }

    my $bug_id = $attachment->{bug_id};
    my $filename = "$bug_id-$patch.patch";
    my $content = $attachment->{data};
    $content =~ s/\015\012/\012/g;

    if (dirToBugID($subdir) && dirToBugID($subdir) != $bug_id) {
        my $summary = getBugSummary($bug_id);
        exit unless confirm("the patch from a different bug:\nBug $bug_id: $summary\ncontinue?");
    }

    pushd("$HTDOCS_PATH/$subdir");
    info("creating $filename");
    write_file($filename, { binmode => ':raw' }, $content);
    popd();
    return $filename;
}

sub deployRepoPatch {
    my ($repodir, $patch, $force) = @_;

    info("fetching patch $patch");
    my $proxy = getBmoProxy();

    my $response = $proxy->call('Bug.attachments', { attachment_ids => [ $patch ] });
    soapErrChk($response);

    my $attachments = $response->result->{attachments};
    die "failed to get attachment $patch information\n" unless exists $attachments->{$patch};
    my $attachment = $attachments->{$patch};
    printf STDERR "Bug %s: %s\n", $attachment->{bug_id}, $attachment->{description} || $attachment->{summary};
    die "attachment is not a patch\n" unless $attachment->{is_patch} == '1';
    die "attachment is obsolete\n" if $attachment->{is_obsolete} == '1';
    my $reviewed = 0;
    foreach my $flag (@{$attachment->{flags}}) {
        if ($flag->{name} eq 'review' && $flag->{status} eq '+') {
            $reviewed = 1;
            last;
        }
    }
    if (!$force) {
        die "attachment is not r+\n" unless $reviewed;
    }

    my $bug_id = $attachment->{bug_id};
    my $filename = "$bug_id-$patch.patch";
    my $content = $attachment->{data};
    $content =~ s/\015\012/\012/g;

    pushd($repodir);
    info("creating $filename");
    write_file($filename, { binmode => ':raw' }, $content);
    applyPatch(undef, $filename);
    info("deleting $filename");
    unlink($filename);
    popd();
}

sub applyPatch {
    my ($subdir, $filename) = @_;
    pushd("$HTDOCS_PATH/$subdir") if $subdir;
    my @patch = read_file($filename);
    open(PATCH, "|patch -p0");
    foreach my $line (@patch) {
        # === renamed file 'extensions/BMO/web/js/choose_product.js' => 'extensions/BMO/web/js/prod_comp_search.js'
        if ($line =~ /^=== renamed file '([^']+)' => '([^']+)'/) {
            print "renamed '$1' => '$2'\n";
            rename($1, $2);
            next;
        }
        print PATCH $line;
    }
    close(PATCH);
    popd() if $subdir;
}

my %_bug_cache;

sub getBugInfo {
    my ($id) = @_;

    if (!exists $_bug_cache{$id}) {
        info("looking up bug $id");
        my $proxy = getBmoProxy();
        my $response = $proxy->call(
            'Bug.get',
            {
                ids => [ $id ],
                include_fields => [ 'id', 'product', 'version', 'target_milestone', 'summary' ],
            }
        );
        soapErrChk($response);

        my $rh = $response->result->{bugs}->[0];
        $_bug_cache{$id} = {
            product => $rh->{product},
            version => $rh->{version},
            milestone => $rh->{target_milestone},
            summary => $rh->{summary},
        };
    }

    return $_bug_cache{$id};
}

sub diff {
    my ($subdir, $bug, $stdout, $ignore_whitespace, @files) = @_;
    die "Not a branch: $HTDOCS_PATH/$subdir\n" unless -e "$HTDOCS_PATH/$subdir/.bzr";
    pushd("$HTDOCS_PATH/$subdir");

    $bug = $1 if $bug =~ /^(\d+)_/;
    my $revision = 0;
    if ($bug ne '-') {
        foreach my $file (glob("${bug}_*.patch")) {
            next unless $file =~ /^\Q$bug\E_(\d+)\.patch$/;
            $revision = $1 if $1 > $revision;
        }
        $revision++;
    }

    unfix($subdir);
    my $command = "bzr diff " . ($ignore_whitespace ? "--diff-options -w " : '') . " @files";
    my $patch = `$command`;
    my $filename;
    if ($bug eq '-' or $stdout) {
        print $patch;
    } else {
        $filename = "${bug}_$revision.patch";
        print "creating $filename\n";
        write_file($filename, $patch);
    }
    fixSubDir($subdir);
    info("$filename created") if $filename;
    popd();
    return $filename;
}

sub fixParams {
    my ($subdir) = @_;
    my $filename = "$HTDOCS_PATH/$subdir/data/params";
    return unless -e $filename;

    if (getRepoBase($subdir) eq 'bmo') {
        foreach my $name (keys %PARAMS_BMO) {
            $PARAMS{$name} = $PARAMS_BMO{$name};
        }
    }

    if ($subdir eq 'mod_perl') {
        $PARAMS{urlbase} = $MODPERL_BASE;
        $PARAMS{attachment_base} = $MODPERL_ATTACH_BASE;
        $PARAMS{cookiepath} = "/";
        $PARAMS{cookiedomain} = '';
    } else {
        $PARAMS{urlbase} = sprintf($PARAMS{urlbase}, $subdir);
        $PARAMS{attachment_base} = sprintf($PARAMS{attachment_base}, $subdir);
        $PARAMS{cookiepath} = "/$subdir/";
        $PARAMS{cookiedomain} = '';
    }

    $PARAMS{announcehtml} = getAnnounceHtml($subdir);

    my @file;
    open(FH, $filename) or die "failed to open $filename: $!\n";
    while (<FH>) {
        my $line = $_;
        foreach my $name (sort keys %PARAMS) {
            $line = fixParam($line, $name, $PARAMS{$name});
        }
        push @file, $line;
    }
    close FH;

    open(FH, ">$filename") or die $!;
    print FH @file;
    close FH;
}

sub getAnnounceHtml {
    my ($subdir) = @_;
    my $id = dirToBugID($subdir);
    my $db = getCurrentDatabase($subdir);
    my $dev_name = $id
        ? qq#<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=$id"><b>Bug $id</b></a>#
        : "<b>$subdir</b>";
    my $summary = CGI::escapeHTML(getDirSummary($subdir));
    my $url = $URL_BASE;
    my $announcehtml = <<EOF;
<div style="
background: url(${url}bkg_warning.png) repeat-y scroll left top #fff9db;
color: #666458;
padding: 5px 5px 5px 19px;
">$dev_name ($db) $summary</div>
EOF
    $announcehtml =~ s/\n//g;
    return $announcehtml;
}

sub fixParam {
    my ($line, $name, $value) = @_;
    if ($line =~ /'\Q$name\E'\s*=>\s*('[^']*'|\d+),/) {
        my ($current) = ($1);
        $current =~ s/(^'|'$)//g;
        if ($current ne $value) {
            print "changing $name to '$value'\n";
            $line =~ s/'\Q$name\E'\s*=>\s*(?:'[^']*'|\d+),/'$name' => '$value',/;
        }
    }
    return $line;
}

sub fixHtAccess {
    my ($subdir) = @_;
    my $filename = "$HTDOCS_PATH/$subdir/.htaccess";
    my @file = -e $filename ? read_file($filename) : ();
    my $foundRewriteBase = 0;
    my $foundRewriteEngine = 0;
    foreach my $line (@file) {
        if ($line =~ /^\s*RewriteEngine\s+On/i) {
            $foundRewriteEngine = 1;
        }
        if ($line =~ /^\s*RewriteBase\s+\/([^\/]+)\//i) {
            $foundRewriteBase = $1;
        }
    }
    return if !$foundRewriteEngine || $foundRewriteBase eq $subdir;
    info("fixing .htaccess");
    my $i = 0;
    foreach my $line (@file) {
        $i++;
        next unless $line =~ /^\s*RewriteBase\s+/i;
        splice @file, $i - 1, 1;
        last;
    }
    $i = 0;
    foreach my $line (@file) {
        $i++;
        next unless $line =~ /^\s*RewriteEngine\s+On/i;
        splice @file, $i, 0, "RewriteBase /$subdir/\n";
        last;
    }
    write_file("$HTDOCS_PATH/$subdir/.htaccess", @file);
}

sub revertHtAccess {
    my ($subdir) = @_;
    my @file = read_file("$HTDOCS_PATH/$subdir/.htaccess");
    my $foundRewriteBase = 0;
    foreach my $line (@file) {
        if ($line =~ /^\s*RewriteBase\s+/i) {
            $foundRewriteBase = 1;
            last;
        }
    }
    return unless $foundRewriteBase;
    info("reverting .htaccess");
    my $i = 0;
    foreach my $line (@file) {
        $i++;
        next unless $line =~ /^\s*RewriteBase\s+/i;
        splice @file, $i - 1, 1;
        last;
    }

    my $content = join('', @file);
    $content =~ s/\015\012/\012/g;
    write_file("$HTDOCS_PATH/$subdir/.htaccess", { binmode => ':raw' }, $content);
}

sub deleteCrud {
    my ($subdir) = @_;
    my @crud_dirs;
    find(
        sub {
            my $filename = $File::Find::name;
            return unless
                $filename =~ /\~\d+\~$/
                || basename($filename) =~ /^\._/
                || $filename =~ /\.orig$/
                || $filename =~ /\.moved$/
                || $filename =~ /\.rej$/;
            my $name = $filename;
            $name =~ s#^\Q$HTDOCS_PATH/$subdir/##;
            print "deleting $name\n";
            if (-d $filename) {
                push @crud_dirs, $filename;
            } else {
                unlink($filename);
            }
        },
        "$HTDOCS_PATH/$subdir"
    );
    foreach my $dir (@crud_dirs) {
        rmdir($dir);
    }
    if (-d "$HTDOCS_PATH/$subdir/data/deleteme") {
        print "deleting data/deleteme\n";
        system (qq#rm -rf "$HTDOCS_PATH/$subdir/data/deleteme"#);
        if (-d "$HTDOCS_PATH/$subdir/data/deleteme") {
            system (qq#sudo rm -rf "$HTDOCS_PATH/$subdir/data/deleteme"#);
        }
    }
}

sub fixSubDir {
    my ($subdir) = @_;
    applyLocalPatches($subdir);
    fixParams($subdir);
    fixHtAccess($subdir);
    fixPerms($subdir);
    setRepoVersion($subdir);
    deleteCrud($subdir);
    updateLocalConfig($subdir);
    if (getCurrentDatabase($subdir) eq 'bugs') {
        alert("current database is 'bugs'");
    }
}

sub fixRepo {
    my ($path, $quick) = @_;
    $quick = 0 unless $quick;
    pushd($path);

    find(
        sub {
            my $file = $_;
            return if -d $file;
            if ($file =~ /\~\d+\~$/ || $file =~ /^\._/ || $file =~ /\.(orig|rej)$/) {
                print "deleting $file\n";
                unlink($file);
                return;
            }
            return if $quick;
            return unless -T $file;
            return if $file =~ /\/\.bzr\//;
            my $content = read_file($file, binmod => ':raw');
            return unless $content =~ /\015\012/;
            my $filename = $File::Find::name;
            $filename =~ s/^\.\///;
            print "converting $filename to unix line endings\n";
            $content =~ s/\015\012/\012/g;
            write_file($file, { binmod => ':raw' }, $content);
        },
        '.'
    );
    return if $quick;

    foreach my $line (`bzr diff`) {
        next unless $line =~ /modified file '([^']+)' \(properties changed: ([+-]x) to [+-]x\)/;
        my ($file, $perm) = ($1, $2);
        print "fixing permissions for $file\n";
        system "chmod $perm $file";
    }

    foreach my $file (`find . -type f -perm /111`) {
        chomp $file;
        next if $file =~ /\.(cgi|pl|swp)$/i;
        next if $file =~ /^\.\/contrib\//;
        print "fixing permissions for $file\n";
        system "chmod -x $file";
    }

    popd();
}

sub disableBugmail {
    my ($subdir) = @_;
    my $dbh = getDbh($subdir);
    $dbh->do("UPDATE profiles SET disable_mail=1");
    $dbh->do("UPDATE flagtypes SET cc_list=''");
    if (@NEVER_DISABLE_BUGMAIL) {
        $dbh->do("UPDATE profiles SET disable_mail=0 WHERE login_name IN ('" . join("','", @NEVER_DISABLE_BUGMAIL) . "')");
    }
}

sub resetEmailQueue {
    my ($subdir) = @_;
    my $dbh = getDbh($subdir);
    $dbh->do("UPDATE ts_job SET grabbed_until = 0, insert_time = 0, run_after = 0");
}

sub resetPassword {
    my ($subdir, $login) = @_;
    pushd("$HTDOCS_PATH/$subdir");

    require Bugzilla;
    require Bugzilla::Install;
    Bugzilla::Install::reset_password($login);

    popd();
}

sub setRepoVersion {
    my ($subdir) = @_;
    pushd("$HTDOCS_PATH/$subdir");

    my $repo_version = '';
    if (-d '.bzr') {
        my $bzr = `bzr info`;
        if ($bzr =~ m#bzr\.mozilla\.org/((bugzilla|bmo)/.+)#) {
            $repo_version = trim($1);
            $repo_version =~ s#/$##;
            $repo_version =~ s#/#-#;
        }
    }
    if (getDirData($subdir, 'repo-version') ne $repo_version) {
        print "setting repo-version to $repo_version\n";
        setDirData($subdir, 'repo-version', $repo_version);
    }

    popd();
}

sub unfix {
    my ($subdir) = @_;
    revertHtAccess($subdir);
    fixAttributes($subdir);
    revertLocalPatches($subdir);
    yui($subdir, 'min');
    deleteCrud($subdir);
    fixParams($subdir);
}

sub dropTable {
    my ($subdir, @tables) = @_;

    my $dbh = getDbh($subdir);
    my $database = getCurrentDatabase($subdir);

    foreach my $table (@tables) {
        my ($exists) = $dbh->selectrow_array("
            SELECT 1
              FROM information_schema.tables
             WHERE table_schema = '$database'
                   AND table_name = '$table'
        ");
        if ($exists) {
            exit unless confirm("are you sure you want to drop the table '$table'?");
        }
    }

    info("loading schema");
    pushd("$HTDOCS_PATH/$subdir");
    my $bz_dbh = getBzDbh();
    my $schema = $bz_dbh->_bz_real_schema;

    foreach my $table (@tables) {
        if (!exists $schema->{abstract_schema}->{$table}) {
            alert("failed to find table '$table' in bz_schema");
        }
    }
    foreach my $table (@tables) {
        info("dropping table '$table'");
        $dbh->do("DROP TABLE $table");
        delete $schema->{abstract_schema}->{$table};
    }

    info("updating bz_schema");
    $bz_dbh->_bz_store_real_schema();
    popd();
}

sub dropColumn {
    my ($subdir, @names) = @_;

    my $dbh = getDbh($subdir);
    my $database = getCurrentDatabase($subdir);
    my @columns;

    foreach my $name (@names) {
        my @items = split(/\./, $name);
        if (scalar @items != 2) {
            die "invalid column '$name'; use table.column\n";
        }
        my ($table, $column) = @items;
        my ($exists) = $dbh->selectrow_array("
            SELECT 1
              FROM information_schema.columns
             WHERE table_schema = '$database'
                   AND table_name = '$table'
                   AND column_name = '$column'
        ");
        if ($exists) {
            exit unless confirm("are you sure you want to drop the column '$table.$column'?");
        }
        push @columns, { table => $table, column => $column };
    }

    info("loading schema");
    pushd("$HTDOCS_PATH/$subdir");
    my $bz_dbh = getBzDbh();
    my $schema = $bz_dbh->_bz_real_schema;

    foreach my $rh (@columns) {
        my ($table, $column) = ($rh->{table}, $rh->{column});
        if (!exists $schema->{abstract_schema}->{$table}) {
            die "failed to find table '$table' in bz_schema\n";
        }
        my $table_schema = $schema->{abstract_schema}->{$table};
        my @fields = @{$table_schema->{FIELDS}};
        my $found = 0;
        for (my $i = 0; $i < scalar(@fields); $i += 2) {
            my ($name, $rh) = @fields[$i, $i + 1];
            if ($name eq $column) {
                $found = 1;
                last;
            }
        }
        if (!$found) {
            die "failed to find column '$column' in table '$table' in bz_schema\n";
        }
    }

    foreach my $rh (@columns) {
        my ($table, $column) = ($rh->{table}, $rh->{column});
        my $table_schema = $schema->{abstract_schema}->{$table};
        my @fields = @{$table_schema->{FIELDS}};
        info("dropping '$table.$column'");
        $dbh->do("ALTER TABLE $table DROP COLUMN $column");
        my @new_fields;
        for (my $i = 0; $i < scalar(@fields); $i += 2) {
            my ($name, $rh) = @fields[$i, $i + 1];
            if ($name ne $column) {
                push @new_fields, ($name, $rh);
            }
        }
        $schema->{abstract_schema}->{$table}->{FIELDS} = \@new_fields;
    }

    info("updating bz_schema");
    $bz_dbh->_bz_store_real_schema();
    popd();
}

sub dropCustomField {
    my ($subdir, @fields) = @_;
    pushd("$HTDOCS_PATH/$subdir");

    info("loading schema");
    my $dbh = getBzDbh();

    my @field_objs;
    foreach my $field (@fields) {
        my $field_obj;
        eval "
            use Bugzilla::Field;
            \$field_obj = new Bugzilla::Field({'name' => '$field'});
        ";
        die "invalid custom field '$field':\n$@\n" if $@;
        die "invalid custom field '$field'\n" unless $field_obj;
        exit unless confirm("are you sure you want to drop the custom field '$field'?");
        push @field_objs, $field_obj;
    }

    $dbh->bz_start_transaction;
    foreach my $field (@field_objs) {
        my $name = $field->name;
        info("deleting $name...");
        info("deleting from bugs_activity...");
        $dbh->do("DELETE FROM bugs_activity WHERE fieldid = " . $field->id);
        info("removing values from bugs...");
        $dbh->do("UPDATE bugs SET $name = NULL WHERE $name IS NOT NULL");
        info("dropping field...");
        $field->remove_from_db();
    }

    $dbh->bz_commit_transaction;
    popd();
}

sub exportSchema {
    my ($subdir, $filename) = @_;
    pushd("$HTDOCS_PATH/$subdir");

    info("connecting");
    my $dbh = getBzDbh();

    my ($schema) = $dbh->selectrow_array("SELECT schema_data FROM bz_schema");
    popd();

    info("writing schema to '$filename'");
    write_file($filename, $schema);
}

sub importSchema {
    my ($subdir, $filename) = @_;
    my $schema = read_file($filename);

    pushd("$HTDOCS_PATH/$subdir");

    info("connecting");
    pushd("$HTDOCS_PATH/$subdir");
    my $dbh = getBzDbh();

    return unless confirm("update database with schema from '$filename'? ");
    info("updating");
    my $sth = $dbh->prepare("UPDATE bz_schema SET schema_data = ?");
    $sth->bind_param(1, $schema, $dbh->BLOB_TYPE);
    $sth->execute();
    popd();
}

sub getBzDbh {
    my ($subdir) = @_;
    my ($dbh);
    eval '
        use Bugzilla;
        $dbh = Bugzilla->dbh;
    ';
    initHandlers();
    return $dbh;
}

sub grepSummaries {
    my ($query, $subdir, $outputDirOnly) = @_;
    pushd("$HTDOCS_PATH");
    my @dirs = grep { !-l $_ && -d $_ && -e "$_/data/summary" } glob('*');
    my $found = 0;
    foreach my $dir (@dirs) {
        my $summary = read_file("$dir/data/summary");
        next unless $summary =~ /\Q$query\E/i;
        if ($outputDirOnly) {
            print "$dir\n";
        } else {
            if ($subdir && $dir eq $subdir) {
                info("$dir: $summary");
            } else {
                print "$dir: $summary\n";
            }
        }
        $found = 1;
        last if $outputDirOnly;
    }
    $found || print STDERR "no matches\n";
}

sub showInfo {
    my ($subdir) = @_;

    my $bzr_branch = '';
    my $filename = "$HTDOCS_PATH/$subdir/.bzr/branch/branch.conf";
    if (-e $filename) {
        my $conf = read_file($filename);
        ($bzr_branch) = $conf =~ /bound_location\s*=\s*(.+)\n/;
    }

    printf(
        '  ' . trim("
  subdir: %s
 summary: %s
    repo: %s
     bzr: %s
database: %s
 comment: %s
        ") . "\n",
        coloured($subdir, 'green'),
        coloured(getDirSummary($subdir) || '-', 'green'),
        getDirData($subdir, 'repo-version') || '-',
        $bzr_branch || '-',
        getCurrentDatabase($subdir),
        getDirData($subdir, 'comment') || '-',
    );
}

sub mysqlClient {
    my ($subdir) = @_;

    my $localconfig = read_file("$HTDOCS_PATH/$subdir/localconfig");

    $localconfig =~ s/\n\$(\S+)/\n\$config{'$1'}/g;
    our %config;
    eval $localconfig;

    my $cmd = "mysql -h $config{db_host} ";
    $cmd .= "-P $config{db_port} " if $config{db_port};
    $cmd .= "-u $config{db_user} -p$config{db_pass} ";
    $cmd .= $config{db_name};

    system $cmd;
}

sub mysqlTraceToggle {
    my ($subdir) = @_;
    my $dbh = getDbh($subdir, 1);
    my (undef, $value) = $dbh->selectrow_array("SHOW VARIABLES LIKE 'general_log'");
    my (undef, $filename) = $dbh->selectrow_array("SHOW VARIABLES LIKE 'general_log_file'");
    if ($value eq 'ON') {
        info("disabling logging to $filename");
        $value = 'OFF';
    } else {
        info("enabling logging to $filename");
        $value = 'ON';
    }
    $dbh->do("SET GLOBAL general_log='$value'");
}

sub createDatabase {
    my ($subdir, $db) = @_;
    my $dbh = getDbh($subdir, 1);
    $db = validateDatabase($db);
    $dbh->do("CREATE DATABASE $db DEFAULT CHARACTER SET utf8");
    info("database $db created");
}

sub yui {
    my ($subdir, $edition, $force) = @_;
    pushd("$HTDOCS_PATH/$subdir");
    return unless -e "$HTDOCS_PATH/$subdir/js/yui/animation/animation-min.js";
    die "unsupported edition '$edition'\n" unless $edition eq 'min' || $edition eq 'debug';

    unless ($force) {
        my @js = read_file('js/yui/yahoo/yahoo-min.js');
        return if $edition eq 'min' && scalar(@js) <= 8;
        return if $edition eq 'debug' && scalar(@js) > 8;
    }

    my $src = "$YUI2_PATH/build";
    find(
        sub {
            my $filename = $File::Find::name;
            return if -d $filename;
            $filename =~ s/^.*\Q$HTDOCS_PATH\/$subdir\/js\/yui\///;
            return unless
                $filename =~ /^(.+)-min\.(.+)/
                || $filename =~ /^(yahoo-dom-event\/yahoo-dom-event)\.(js)$/;
            my ($file, $ext) = ($1, $2);
            my $replacement;
            if ($edition eq 'debug') {
                if ($file eq 'yahoo-dom-event/yahoo-dom-event') {
                    $replacement = "$file-debug.$ext";
                } elsif (-e "$src/$file.$ext") {
                    $replacement = "$file.$ext";
                }
            } else {
                if ($file eq 'yahoo-dom-event/yahoo-dom-event') {
                    $replacement = "$file.$ext";
                } elsif (-e "$src/$file-min.$ext") {
                    $replacement = "$file-min.$ext";
                }
            }
            die "failed to find replacement for $file" unless $replacement;
            info("replacing $filename with $replacement");
            copy("$src/$replacement", $File::Find::name)
                or die $!;
        },
        "$HTDOCS_PATH/$subdir/js/yui"
    );

    $src = "$YUI3_PATH/build";
    return unless -d $src;
    find(
        sub {
            my $filename = $File::Find::name;
            return if -d $filename;
            $filename =~ s/^.*\Q$HTDOCS_PATH\/$subdir\/js\/yui3\///;
            return if $filename =~ /^gallery-/;
            return unless
                $filename =~ /^(.+)-min\.(.+)/;
            my ($file, $ext) = ($1, $2);
            my $replacement;
            if ($edition eq 'debug') {
                if (-e "$src/$file.$ext") {
                    $replacement = "$file.$ext";
                }
            } else {
                if (-e "$src/$file-min.$ext") {
                    $replacement = "$file-min.$ext";
                }
            }
            die "failed to find replacement for $filename" unless $replacement;
            info("replacing $filename with $replacement");
            copy("$src/$replacement", $File::Find::name)
                or die $!;
        },
        "$HTDOCS_PATH/$subdir/js/yui3"
    );
}

sub checkForTabs {
    my ($subdir) = @_;

    my $root = "$HTDOCS_PATH/$subdir";
    my @invalid;
    my @ignore = qw(
        js/change-columns.js
        t/002goodperl.t
    );
    find(sub {
            my $file = $File::Find::name;
            return if -d $file;
            return unless -T $file;
            return if $file =~ /^\Q$root\E\/(\.bzr|contrib|data|js\/yui\d?|docs)\//;
            return if $file =~ /\.patch$/;
            my $filename = $file;
            $filename =~ s/^\Q$root\E\///;
            return if grep { $_ eq $filename } @ignore;
            my $content = read_file($file);
            return unless $content =~ /\t/;
            push @invalid, $file;
        },
        "$HTDOCS_PATH/$subdir"
    );

    return unless scalar @invalid;
    alert('The following files contain tabs:');
    foreach my $filename (@invalid) {
        $filename =~ s/^\Q$root\E\///;
        alert($filename);
    }
    die "\n";
}

sub checkForUnknownFiles {
    my ($subdir) = @_;

    my $root = "$HTDOCS_PATH/$subdir";
    pushd($root);
    my @lines = `bzr st`;
    popd();
    chomp(@lines);

    my @unknown;
    my $current;
    foreach my $line (@lines) {
        if ($line =~ /^([^:]+):/) {
            $current = $1;
        } elsif ($current eq 'unknown') {
            $line =~ s/^\s+//;
            next if $line =~ /\.patch$/;
            push @unknown, $line;
        }
    }
    return unless scalar @unknown;

    alert('The following files are new but are missing from bzr:');
    foreach my $filename (@unknown) {
        $filename =~ s/^\Q$root\E\///;
        alert($filename);
    }
    die "\n";
}

sub checkForCommonMistakes {
    my ($subdir, $filename) = @_;

    my @lines;
    if ($filename) {
        @lines = read_file("$HTDOCS_PATH/$subdir/$filename");
    } else {
        pushd("$HTDOCS_PATH/$subdir");
        @lines = `bzr diff`;
        popd();
    }

    my %whitespace;
    my %xxx;
    my $hunk_file;
    foreach my $line (@lines) {
        next unless $line =~ /^\+/;
        if ($line =~ /^\+\+\+ (\S+)/) {
            $hunk_file = $1;
            next;
        }
        chomp($line);
        if ($line =~ /\s+$/) {
            my $ra = $whitespace{$hunk_file} ||= [];
            push @$ra, $line;
        }
        if ($line =~ /XXX/) {
            my $ra = $xxx{$hunk_file} ||= [];
            push @$ra, $line;
        }
    }
    if (scalar keys %whitespace) {
        alert("trailing whitespace added:");
        foreach my $file (sort keys %whitespace) {
            print "$file\n";
            foreach my $line (@{ $whitespace{$file} }) {
                print "  $line\n";
            }
        }
    }
    if (scalar keys %xxx) {
        alert("line with XXX added:");
        foreach my $file (sort keys %xxx) {
            print "$file\n";
            foreach my $line (@{ $xxx{$file} }) {
                print "  $line\n";
            }
        }
    }
}

sub addBoilerPlates {
    my ($path, @files) = @_;

    if (!scalar @files) {
        my @added = getAddedFiles($path);
        foreach my $file (@added) {
            if (isMissingBoilerPlate("$path/$file")) {
                push @files, $file;
            }
        }
        die "no new files with missing boiler-plates\n" unless scalar @files;

    } elsif ($files[0] eq '-all') {
        @files = ();
        find(
            sub {
                my $name = $_;
                return if -d $name;
                return unless $name =~ /\./;
                return if $name =~ /\.swp$/;
                if (isMissingBoilerPlate($name)) {
                    my $file = abs_path($name);
                    $file =~ s/^\Q$path\E\///;
                    push @files, $file;
                }
            },
            '.'
        );
        die "no files with missing boiler-plates\n" unless scalar @files;
    }

    my $cwd = cwd();
    foreach my $file (@files) {
        if (-e $file) {
            $file = "$cwd/$file";
        }
        $file =~ s/^\Q$path\/\E//;
    }

    pushd($path);
    print "add boiler-plate to:\n";
    foreach my $file (@files) {
        next unless confirm("$file ?");
        my ($ext) = $file =~ /^.+\.(.+)$/;
        my $bp_file = "$DATA_PATH/boiler-plates/mpl.$ext";
        die "failed to find boilerplate for .$ext\n" unless -e $bp_file;
        my @bp = read_file($bp_file);
        foreach my $line (@bp) {
            $line =~ s/20__/2011/g;
        }
        my @file = read_file($file);
        if ($file[0] =~ /^#!/) {
            splice(@file, 1, ($file[1] eq "\n" ? 1 : 0), ("\n", @bp));
        } else {
            splice(@file, 0, 0, @bp);
        }
        my $content = join("", @file);
        write_file($file, $content);
        print "$file updated\n";
    }
    popd();
}

sub getAddedFiles {
    my ($path) = @_;
    pushd($path);
    my $in_added = 0;
    my @added_files;
    foreach my $line (`bzr st`) {
        chomp $line;
        if ($line =~ /^  (.+)/) {
            my $file = $1;
            next if $file =~ /\@$/;
            push @added_files, $file if $in_added && !-d $file;
        } else {
            $in_added = $line eq 'added:';
        }
    }
    popd();
    return @added_files;
}

sub isMissingBoilerPlate {
    my ($file) = @_;
    my $content = read_file($file);
    if ($content !~ /The contents of this file are subject to/ &&
        $content !~ /is subject to the terms of the/) {
        return 1;
    }
    return 0;
}

sub runChecksetup {
    my (@args) = @_;
    info("running checksetup");
    system "./checksetup.pl @args";
}

sub runTests {
    my ($subdir, @args) = @_;
    pushd("$HTDOCS_PATH/$subdir");
    $Test::Harness::verbose = grep { $_ eq '-v' } @args;
    @args = grep { !/^-/ } @args;
    my @tests;
    if (scalar @args) {
        foreach my $arg (@args) {
            push @tests, glob("t/*$arg*.t");
        }
    } else {
        push @tests, glob("t/*.t");
    }
    runtests(@tests);
    popd();
}

sub runXtTests {
    my ($subdir, @args) = @_;
    pushd("$HTDOCS_PATH/$subdir");
    $Test::Harness::verbose = grep { $_ eq '-v' } @args;
    @args = grep { !/^-/ } @args;
    my $dbh = getDbh($subdir);
    my ($bug_count) = $dbh->selectrow_array("SELECT COUNT(*) FROM bugs");
    if ($bug_count) {
        my $database = getCurrentDatabase($subdir);
        die "unable to execute xt tests on $database because the bugs table is not empty\n";
    }
    # if the tests die, bugs_fulltext isn't cleared, and can result in duplicate key errors
    $dbh->do('DELETE FROM bugs_fulltext');
    $ENV{BZ_WRITE_TESTS} = 1;
    runtests('xt/search.t');
    popd();
}

sub fixAttributes {
    my ($subdir) = @_;
    return unless -d "$HTDOCS_PATH/$subdir/.bzr";
    pushd("$HTDOCS_PATH/$subdir");
    foreach my $line (`bzr diff`) {
        next unless $line =~ /modified file '([^']+)' \(properties changed: ([+-]x) to [+-]x\)/;
        my ($file, $perm) = ($1, $2);
        info("fixing properties for $file");
        $file = '"' . $file . '"' if $file =~ / /;
        system("chmod $perm $file");
    }
    popd();
}

sub fixPerms {
    my ($subdir) = @_;
    pushd("$HTDOCS_PATH/$subdir");
    my @spec = glob('*');
    push @spec, '.htaccess';
    push @spec, '.bzr' if -d "$HTDOCS_PATH/$subdir/.bzr";
    my $user = getpwuid($>);
    system("chgrp -R --silent $LOCALCONFIG{webservergroup} @spec");
    @spec = grep { $_ ne 'data' } @spec;
    sudoOnOutput("chown -R $user @spec");
    sudoOnOutput('find . -path ./data -prune -type d -exec chmod g+x {} \;');
    foreach my $file (`find . -type f -perm /111`) {
        chomp $file;
        next if $file =~ /\.(cgi|pl|swp)$/;
        next if $file =~ /^\.\/contrib\//;
        info("fixing permissions for $file");
        $file = '"' . $file . '"' if $file =~ / /;
        sudoOnOutput("chmod -x $file");
    }
    popd();
}

sub sudoOnOutput {
    my ($command) = @_;
    my $output = `$command 2>&1`;
    if ($output) {
        info($command);
        die $output;
        info("escalating $command");
        system "sudo $command";
    }
}

sub getRepoBase {
    my ($subdir) = @_;
    my $repo_version = getDirData($subdir, 'repo-version');
    if (!$repo_version) {
        setRepoVersion($subdir);
    }
    $repo_version = getDirData($subdir, 'repo-version');

    if ($repo_version =~ /^bmo-/) {
        return 'bmo';
    } elsif ($repo_version =~ /^bugzilla-/) {
        return 'bugzilla';
    } else {
        die "unsupported repo_version: '$repo_version'";
    }
}

__DATA__

=head1 NAME

bz - tool for manipulating bugzilla development instances.

=head1 SYNOPSIS

=over 4

=item B<bz> B<new> I<subdir> I<repo> I<database>

create a new instance

=item B<bz> B<info>

displays information about the current instance

=item B<bz> B<list>

lists all instances

=item B<bz> B<patch> [I<attachment id>]
=item B<bz> B<patch> [I<attachment url>]
=item B<bz> B<patch> B<bug> [I<bug id>]

download and apply a patch

=item B<bz> B<new-patch> [I<patch number or url>]

revert current patch, then download and apply a patch

=item B<bz> B<diff> [-quick] [-w] [I<patch number>] [I<files>]

generate a diff against bzr; tests will be executed if I<-quick> is not specified.
passing I<-w> will ignore whitespaces

=item B<bz> B<db> [I<database>]

show or change the database

=item B<bz> B<fix>

various fixes to make the instance work (params, perms, etc)

=item B<bz> B<fix-all>

runs B<fix> on all instances

=item B<bz> B<bp> [I<file> | B<-all>]

prompts to add boiler plates to new files where it can't find one, or to the specified file
if you pass B<-all> it will prompt for all files under the cwd which are missing boiler plates

=item B<bz> B<unfix>

reverts fixes applied by B<fix>

=item B<bz> B<grep> [-n] I<query>

search summarys for the specified query
if -n is specified, just the first matching bug number is printed

=item B<bz> B<test>

runs bugzilla's test suite

=item B<bz> B<checksetup> | B<cs>

runs bugzilla's checksetup.pl

=item B<bz> B<disable-bugmail>

disables bugmail for all users, and clears all flag CC lists

=item B<bz> B<reset-email-queue>

resets the run_after time for all queued bugmail, forcing them to be processed at the next run.

=item B<bz> B<reset-password> I<login>

resets the password for a login, without running all the checksetup guff.

=item B<bz> B<drop-table> I<table> [I<table>...]

drops the table(s) from the schema and removes from bz_schema

=item B<bz> B<drop-cf> I<field> [I<field>...]

drops the custom field(s), removing from activity and bugs

=item B<bz> B<export-schema> I<filename>

exports bugzilla's bz_schema defination to I<filename>

=item B<bz> B<import-schema> I<filename>

import bugzilla's bz_schema defination from I<filename>
only import files exported by B<export-schema>, unless you like breaking bugzilla

=item B<bz> B<mysql>

runs mysql client connecting to the bugzilla database

=item B<bz> B<mysql-trace>

toggles mysql query tracing

=item B<bz> B<yui-debug>

switches the yui libs to -debug version

=item B<bz> B<yui-min>

switches the yui libs to -min version

=back
